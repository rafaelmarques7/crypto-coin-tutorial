"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const crypto = __importStar(require("crypto"));
const minerData = {
    algorithm: "SHA256",
    lengthBinary: 256,
    powLength: 16,
};
function hexToBinary(hex, expectedLength) {
    // convert to binary
    // use BigInt library, because any number larger than 9*10^15 will be truncated by javascript
    let bin = BigInt("0x" + hex).toString(2);
    // add leading zeros if the binary is not of the expected length
    const numBytesMissing = expectedLength - bin.length;
    if (numBytesMissing > 0) {
        bin = "0".repeat(numBytesMissing) + bin;
    }
    return bin;
}
class Transaction {
    constructor(from, to, ammount) {
        this.from = from;
        this.to = to;
        this.ammount = ammount;
    }
    toString() {
        return JSON.stringify(this);
    }
}
class Block {
    constructor(previousHash, transaction, date = Date.now(), nonce = 0 // this will be updated by the mine function
    ) {
        this.previousHash = previousHash;
        this.transaction = transaction;
        this.date = date;
        this.nonce = nonce;
    }
    get header() {
        // return all fields except the nonce
        return {
            previousHash: this.previousHash,
            transaction: this.transaction,
            date: this.date,
        };
    }
    get hash() {
        const blockStr = JSON.stringify(this.header);
        const hash = crypto.createHash("SHA256");
        hash.update(blockStr).end();
        return hash.digest('hex');
    }
    /**
     * Mining works by trying to find a nonce, so that
     * when you hash the combination of the block headerer and the nonce
     * you get a hash with meets a certain criteria
     * (the criteria is usually a hash that contains a number of trailing zero's)
     * @returns
     */
    mine() {
        let nonce = 0;
        console.log("⛏️ Mining...");
        while (true) {
            // generate hash based on block header and nonce
            const dataToHash = JSON.stringify(this.header) + nonce.toString();
            const hashHex = crypto.createHash(minerData.algorithm).update(dataToHash).digest('hex');
            const hashBinary = hexToBinary(hashHex, minerData.lengthBinary);
            // check if hash passes the mining condition
            if (this.isValidProofOfWork(hashBinary)) {
                console.log(`Found solution, nonce: ${nonce}`);
                this.nonce = nonce;
                return;
            }
            nonce += 1;
        }
    }
    /**
     * Checks if the binary hash starts with a given number of zero's (set by the minerData.powLength)
     * @param hashBinary - string
     * @returns true if it does, false if it does not
     */
    isValidProofOfWork(hashBinary) {
        return hashBinary.substring(0, minerData.powLength) === "0".repeat(minerData.powLength);
    }
}
class Chain {
    constructor() {
        this.chain = [
            // Genesis block
            new Block("", new Transaction("Genesis", "Satoshi", 100))
        ];
    }
    get lastBlock() {
        return this.chain[this.chain.length - 1];
    }
    addBlock(transaction, payerPublicKey, signature) {
        // generate a signature verifier based on the SHA256 algorithm and transaction data
        const verifier = crypto.createVerify("SHA256");
        verifier.update(transaction.toString());
        // verify that the signature was generated by the owner of the payerPublicKey
        const isValidSignature = verifier.verify(payerPublicKey, signature);
        // generate new block only if signature is valid
        if (isValidSignature) {
            const prevHash = this.lastBlock.hash;
            const newBlock = new Block(prevHash, transaction);
            newBlock.mine();
            this.chain.push(newBlock);
        }
    }
}
// there can only be one chain - singleton 
Chain.instance = new Chain();
class Wallet {
    constructor() {
        const keyPair = crypto.generateKeyPairSync('rsa', {
            modulusLength: 2048,
            publicKeyEncoding: { type: 'spki', format: 'pem' },
            privateKeyEncoding: { type: 'pkcs8', format: 'pem' },
        });
        this.publicKey = keyPair.publicKey;
        this.privateKey = keyPair.privateKey;
    }
    sendMoney(ammount, payeePublicKey) {
        const transaction = new Transaction(this.publicKey, payeePublicKey, ammount);
        // create a signature based on the transaction data using SHA256 algorithm
        const sign = crypto.createSign('SHA256');
        sign.update(transaction.toString()).end();
        // sign the transaction using the private key
        const signature = sign.sign(this.privateKey);
        // add transaction to block chain
        Chain.instance.addBlock(transaction, this.publicKey, signature);
    }
}
// Example usage
const satoshi = new Wallet();
const raf = new Wallet();
const lucy = new Wallet();
console.log(Chain.instance);
satoshi.sendMoney(50, raf.publicKey);
raf.sendMoney(25, lucy.publicKey);
lucy.sendMoney(10, satoshi.publicKey);
console.log(Chain.instance);
